" after restart Neovim (or Vim),
" run `call dein#clear_state() || call dein#update()` to apply changes

" settings before all
function! BeforeAll()

  " layers
  let g:navim_settings.layers = [
          \ 'csv',
          \ 'c',
          \ 'completion',
          \ 'core',
          \ 'editing',
          \ 'fzf',
          \ 'indents',
          \ 'java',
          \ 'language',
          \ 'misc',
          \ 'navigation',
          \ 'scm',
          \ 'textobj',
          \ 'unite',
          \ 'web']

  " additional plugins
  let g:navim_settings.additional_plugins = [
          \ 'vim-scripts/argtextobj.vim',
          \ 's3rvac/AutoFenc',
          \ 'scrooloose/nerdcommenter', 
          \ 'vim-scripts/groovyindent-unix',
          \ 'machakann/vim-highlightedyank']
  " better word motion, e.g. camel case
  call add(g:navim_settings.additional_plugins, 'chaoren/vim-wordmotion')
  call add(g:navim_settings.additional_plugins, 'AndrewRadev/linediff.vim')

  " disabled plugins
  let g:navim_settings.disabled_plugins = [
          \ 'vim-textobj-underscore',
          \ 'junkfile.vim',
          \ 'coffeetags',
          \ 'unite-airline_themes',
          \ 'unite-colorscheme',
          \ 'unite-help',
          \ 'unite-tag']
  " using version from GLOBAL instead
  call add(g:navim_settings.disabled_plugins, 'vim-scripts/gtags.vim') 

  " core
  let g:navim_settings.encoding = 'utf-8'
  let g:navim_settings.default_indent = 4
  let g:navim_settings.bin_dir = '/usr/local/bin'
  let g:navim_settings.cscopeprg = 'gtags-cscope'
  "let g:navim_settings.cscopeprg = 'cscope'

  " plugins
  let g:navim_settings.completion_autoselect = 1
  let g:navim_settings.syntaxcheck_autoselect = 0
  let g:navim_settings.syntaxcheck_plugin = 'ale'
  let g:navim_settings.explorer_plugin = 'nerdtree'
  "let g:navim_settings.explorer_plugin = 'vimfiler'
  let g:navim_settings.statusline_plugin = 'airline'
  "let g:navim_settings.statusline_plugin = 'lightline'

  " user interface
  "let g:navim_settings.colorscheme = 'solarized'
  let g:navim_settings.colorscheme = 'molokai'
  "let g:navim_settings.colorscheme = 'jellybeans'
  "let g:navim_settings.colorscheme = 'onedark'
  let g:navim_settings.force256 = 0
  let g:navim_settings.termtrans = 0
  let g:navim_settings.max_column = 120
  let g:navim_settings.powerline_fonts = 1
  let g:navim_settings.nerd_fonts = 1

  " disable clang / gcc linters because they do not use compile_commands.json
  let g:ale_linters = {
          \   'cpp': ['clangtidy', 'cppcheck', 'cpplint'],
          \}
  silent source ~/.navimrc_local

endfunction

" settings after all
function! AfterAll()

  Indent4Space
  set relativenumber
  set virtualedit=block
  " command-line tab completion like in bash
  set wildmode=list:longest
  " keep fold level when switching buffers
  set foldlevelstart=-1
  set clipboard+=unnamedplus
  set title

  if &shell =~ 'bash'
    set shellcmdflag+=\ -O\ globstar\ -O\ extglob
  endif

  " reset left / right to default
  nunmap <Left>
  nunmap <Right>

  nunmap <C-h>
  nunmap <C-j>
  nunmap <C-k>
  nunmap <C-l>
  " focus windows
  nnoremap <M-h> <C-w>h
  nnoremap <M-j> <C-w>j
  nnoremap <M-k> <C-w>k
  nnoremap <M-l> <C-w>l
  " move windows
  nnoremap <M-H> <C-w>H
  nnoremap <M-J> <C-w>J
  nnoremap <M-K> <C-w>K
  nnoremap <M-L> <C-w>L

  nnoremap \ ,

  nnoremap j j
  nnoremap k k

  " camel case
  let g:wordmotion_mappings = {
  \ 'w' : '<M-w>',
  \ 'b' : '<M-b>',
  \ 'e' : '<M-e>',
  \ 'ge' : 'g<M-e>',
  \ 'aw' : 'a<Leader>',
  \ 'iw' : 'i<Leader>',
  \ '<C-R><C-W>' : '<C-R><M-w>'
  \ }

  if has('nvim')
    " escape insert mode in terminal
    tnoremap <M-[> <C-\><C-n>
    " windowing
    tnoremap <M-h> <C-\><C-n><C-w>h
    tnoremap <M-j> <C-\><C-n><C-w>j
    tnoremap <M-k> <C-\><C-n><C-w>k
    tnoremap <M-l> <C-\><C-n><C-w>l
    tnoremap <M-H> <C-\><C-n><C-w>Hi
    tnoremap <M-J> <C-\><C-n><C-w>Ji
    tnoremap <M-K> <C-\><C-n><C-w>Ki
    tnoremap <M-L> <C-\><C-n><C-w>Li
    tnoremap <M-CR> <C-\><C-n>:terminal<CR>
    " scrolling
    tnoremap <S-PageUp> <C-\><C-n><PageUp>
    tnoremap <S-PageDown> <C-\><C-n><PageDown>
    " env variable can be accessed in shell scripts
    let $IN_NEOVIM = "true"
    set termguicolors
    set scrollback=100000
    highlight Cursorline guifg=NONE
    " workaround for neovim issue 4151
    let $FZF_DEFAULT_OPTS .= ' --no-height'

    augroup Terminal
      autocmd!
      " fix for terminal disabling relativenumber
      autocmd TermOpen *  :set relativenumber
    augroup END

    set inccommand=nosplit
  endif

  nnoremap <M-CR> o<Esc>

  " fzf
  nnoremap <Leader>ff :Files<CR>
  nnoremap <Leader>bb :Buffers<CR>
  nnoremap <Leader>fr :History<CR>
  nnoremap <Leader>gf :GFiles<CR>
  nnoremap <Leader>sh :History/<CR>
  nnoremap <M-;> :History:<CR>

  " ripgrep
  set grepprg=rg\ --vimgrep
  set grepformat^=%f:%l:%c:%m

  " grep instead of vimgrep (faster)
  nnoremap <SID>grep-word-in-directory :silent grep! -r '<cword>' . <CR>:copen<CR>
  nmap <Leader>sd <SID>grep-word-in-directory
  nnoremap <SID>grep-in-directory :silent grep! -r '<cword>' . <CR>:copen<CR>
  nmap <Leader>sgd <SID>grep-in-directory
  nnoremap <SID>grep-in-filetype :silent grep! '<cword>' **/*.%:e<CR>:copen<CR>
  nmap <Leader>sgt <SID>grep-in-filetype

  " neomake
  if g:navim_settings.syntaxcheck_plugin ==# 'neomake'
    autocmd! BufWritePost * Neomake
  endif

  augroup QuitAfterDeletingLastBuffer
    autocmd!
    autocmd BufDelete * if len(filter(range(1, bufnr('$')), '! empty(bufname(v:val)) && buflisted(v:val)')) == 1 | quit | endif
  augroup END

  augroup ChangeWorkingDirectoryWhenEnteringBuffer
    autocmd BufEnter * silent! lcd %:p:h
  augroup END
endfunction


" vim: fdm=marker ts=2 sts=2 sw=2 fdl=0

